////
Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
////
TinkerPop3
----------

image:https://raw.githubusercontent.com/apache/incubator-tinkerpop/master/docs/static/images/tinkerpop3-splash.png[TinkerPop3, link="http://tinkerpop.incubator.apache.org"]

Documentation
~~~~~~~~~~~~~

* link:http://tinkerpop.incubator.apache.org/[homepage]
* link:http://tinkerpop.incubator.apache.org/docs/3.0.0-SNAPSHOT/[user documentation]
* link:http://tinkerpop.incubator.apache.org/javadocs/3.0.0-SNAPSHOT/core/[core javadoc]
* link:http://tinkerpop.incubator.apache.org/javadocs/3.0.0-SNAPSHOT/full/[full javadoc]

Building and Testing
~~~~~~~~~~~~~~~~~~~~

* Build Project: `mvn clean install`
** Specify specific tests in a TinkerPop Suite to run: `mvn test -Dgremlin.tests={test class 1, test class 2...}` - note that including a specific test may require its inner class implementation (e.g. `org.apache.tinkerpop.gremlin....UnionTest$ComputerTest`)
** Fast-build (does not run `neo4j-gremlin` tests - use with caution): `mvn clean install -DfeelingLucky`
** Clean the `.groovy/grapes/org.apache.tinkerpop` directory on build: `mvn clean install -DcleanGrapes`
* Regenerate test data (only necessary given changes to IO classes): `mvn clean install -Dio` from `tinkergraph-gremlin` directory
* Build AsciiDocs: `docs/preprocessor/preprocess.sh && mvn process-resources -Dasciidoc && rm -rf docs/target`
* Build JavaDocs: `mvn process-resources -Djavadoc`
* Check for Apache License headers: `mvn apache-rat:check`
* Deploy JavaDocs/AsciiDocs: `bin/publish-docs.sh svn-username`
* Deploy Zip Archives: `mvn deploy -Darchives`
* Integration Tests: `mvn verify -DskipIntegrationTests=false`
* Performance Tests: `mvn verify -DskipPerformanceTests=false`
* Gatling Load Tests: `mvn test -Pgatling -Dhost={hostname}`

IDE Setup
^^^^^^^^^

This section refers specifically to setup within Intellij.  TinkerPop has a module called `gremlin-shaded` which contains shaded dependencies for some libraries that are widely used and tend to introduce conflicts.  To ensure that Intellij properly interprets this module after importing the Maven `pom.xml` perform the following steps:

. Build `gremlin-shaded` from the command line with `mvn clean install`.
. Right-click on the `gremlin-shaded` module in the project viewer of Intellij and select "Remove module".
. In the "Maven Projects" Tool window and click the tool button for "Reimport All Maven projects" (go to `View | Tool Windows | Maven Projects` on the main menu if this panel is not activated).
. At this point it should be possible to compile and run the tests within Intellij, but in the worst case, use `File | Invalidate Caches/Restart` to ensure that indices properly rebuild.

Note that it maybe be necessary to re-execute these steps if the `gremlin-shaded` `pom.xml` is ever updated.

Get Started
~~~~~~~~~~~

[source,bash]
----
$ bin/gremlin.sh

         \,,,/
         (o o)
-----oOOo-(3)-oOOo-----
gremlin>
----

Release Process
~~~~~~~~~~~~~~~

. `mvn apache-rat:check` - ensure license headers are present
. `mvn clean install`
.. `mvn verify -DskipIntegrationTests=false`
.. `mvn verify -DskipPerformanceTests=false`
. Update `CHANGELOG.asciidoc` with release date.
. `bin/bump.sh "version"` to update project files to reference the non-SNAPSHOT version.
. `git diff` and review the updated files (expect all `pom.xml` files and this README)
. `git commit -a -m "TinkerPop x.y.z release"` and `git push`
. `git tag -a -m "TinkerPop x.y.z release" x.y.z` and `git push --tags`
. `bin/publish-docs.sh`
. `mvn clean install -Dasciidoc -Djavadoc -Dmaven.test.skip=true` - generate distributions for the release version with documentation included
. `mvn deploy -Psonatype-oss-release -Dmaven.test.skip=true`
. Log into link:https://oss.sonatype.org/[SonaType], close and then release the release.
. `mvn deploy -Darchives -Dmaven.test.skip=true`
. Update download links on home page.
.. `s3cmd --acl-public put index.html s3://www.tinkerpop.com/`
. Email gremlin-users mailing list and tweet.

Issue Tracker Conventions
~~~~~~~~~~~~~~~~~~~~~~~~~

TinkerPop3 uses Apache JIRA as its link:https://issues.apache.org/jira/browse/TINKERPOP3[issue tracker].  JIRA is a very robust piece of software with many options and configurations.  To simplify usage and ensure consistency across issues, the following conventions should be adhered to:

* An issue's "status" should be in one of two states: `open` or `closed`.
** An `open` issue is newly created, under consideration or otherwise in progress.
** A `closed` issue is completed for purposes of release (i.e. code, testing, and documentation complete).
* An issue's "type" should be one of two options: `bug` or `improvement`.  A `bug` has a very specific meaning, referring to an error that prevents usage of TinkerPop AND does not have a reasonable workaround.  Given that definition, a `bug` should generally have very high priority for a fix.  Everything else is an `improvement` in the sense that any other work is an enhancement to the current codebase.
* The "component" should be representative of the primary area of code that it applies to and all issues should have this property set.
* The "priority" of an issue is represented by two states `critical` and `major`.  It should be assigned as follows:
** If the issue is a `bug` then the "priority" should be `critical`.
** If the issue is an `improvement` then the "priority should be `major`.
* Issues are not assigned "labels".
* Until there is an official release "affected version" should be left empty.
